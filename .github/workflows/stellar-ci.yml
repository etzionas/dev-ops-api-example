name: Dev-ops-assignnment-api-pipeline

on:
  push:
    branches:
      - main
      - staging

jobs:
  deploy:
    name: test, build & push image to docker hub
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
    # Step 2: Set up Python 3.x (for testing before Docker build)
    - name: Set up Python 3.x
      uses: actions/setup-python@v3
      with:
        python-version: '3.12'

    # Step 3: Install dependencies and run tests using Pytest
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    - name: Run tests with Pytest
      run: |
        pytest

    # Step 4: Set up Docker Buildx
    - name: setup docker buildx
      uses: docker/setup-buildx-action@v2

    # Step 5: Log in to Docker Hub (or GitHub Container Registry)
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Step 6: Build and push Docker image
    - name: build and push api
      id: build-push-api
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/fastapi:latest

    # Step 7: SSH into the Azure VM and deploy Docker container in ssh -i use your own path/to/key.pem
    - name: Deploy to Azure VM
      run: |
        echo "${{ secrets.AZURE_SSH_KEY }}" > /tmp/key.pem
        ls /tmp
        chmod 600 /tmp/key.pem
        mkdir -p ~/.ssh
        touch ~/.ssh/known_hosts  # Create the known_hosts file if it doesn't exist
        ssh-keyscan ${{ secrets.AZURE_VM_IP }} >> ~/.ssh/known_hosts
        ssh -T -i /tmp/key.pem ${{ secrets.AZURE_USERNAME }}@${{ secrets.AZURE_VM_IP }} << 'EOF'
          pwd
          ls -l
          docker compose -f ./docker-compose.yml pull
          docker compose -f ./dev-ops-assignment-api/docker-compose.yml pull
          docker compose -f ./dev-ops-assignment-api/docker-compose.yml down || true
          # docker rm fastapi-container || true
          docker compose -f ./dev-ops-assignment-api/docker-compose.yml up -d
        EOF


    # Step 8: Execute the healthcheck through a curl command to the /health endpoint. If it returns non zero, rollback to the stable verson
    - name: Execute health check and Rollback if health check fails
      run: |
        echo "${{ secrets.AZURE_SSH_KEY }}" > /tmp/key.pem
        chmod 600 /tmp/key.pem
        mkdir -p ~/.ssh
        touch ~/.ssh/known_hosts
        ssh-keyscan ${{ secrets.AZURE_VM_IP }} >> ~/.ssh/known_hosts
        ssh -T -i /tmp/key.pem ${{ secrets.AZURE_USERNAME }}@${{ secrets.AZURE_VM_IP }} << 'EOF'
          if ! curl -f http://localhost:8000/health; then
            echo "Health check failed. Rolling back to stable version."
            # Modify the docker-compose.yml to switch to the stable image for FastAPI
            sed -i 's/image: ${{ secrets.DOCKER_USERNAME }}\/fastapi:latest/image: ${{ secrets.DOCKER_USERNAME }}\/fastapi:stable/' docker-compose.yml
            docker compose up -d fastapi  # Only restart FastAPI service with the stable image
            exit 1 # This is to make the pipeline fail after rollback to indicate to the developer that it failed
          else
            echo "health check passed. Continuing the pipeline"
          fi
        EOF
